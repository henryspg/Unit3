from flask import Flask, request, jsonify
import random
import os
import pickle
from fastapi import FastAPI
import numpy as np


"""
This code is not finished.
Waiting for y_pred value, generated by DS-unit4.
In this code, temporarily, y_pred is taken as random value.
"""

app = FastAPI(
    title='DS API Airbnb aug-2020',
    description='Under review by Henry Gultom',
    version='0.1',
    docs_url='/',
)

@app.get('/')
def root():
    """hello from Henry, DS17"""
    return {"Hello" : "everyone"}


# Just in case we need user info
@app.get('/user/{username}')
def user(username):
    # return "Hello user"
    object_to_return = {
        "username":username,
        "num_of_requests":random.randint(0, 9),
    }
    return object_to_return # jsonify(object_to_return)


@app.post('/predict')
async def predict(bedrooms: int = 3, bathrooms:float = 2.5, Accommodates:int = 2, Beds: int=1, Guest_included: int=1, Minimum_nights: int=1, Maximum_nights: int=2):
    """ On this page we will predict the price based on below features"""

    y_pred = random.randint(20, 300)
    res = {
        "status": "success",
        "bedrooms": bedrooms,
        "bathrooms": bathrooms,
        "Accommodates" : Accommodates,
        "Beds": Beds,
        "Guest_included": Guest_included,
        "Minimum_nights": Minimum_nights,
        "Maximum_nights": Maximum_nights,
        "predicted_price": y_pred
    }

    return res

########################### connect to DB ###################################


# 1- Connect our python with SQLITE Dbase. If the DBASE doesnt exist, it will create one
conn = sqlite3.connect('airbnb.sqlite3')
curs = conn.cursor()


 Cleansed	City	Property Type	Room Type		Bathrooms	Bedrooms		Price	Guests Included	Extra People	Minimum Nights	


# 2- Create the table: airbnb
create1 = """
DROP TABLE IF exists airbnb;
CREATE TABLE airbnb  (
  Neighbourhood  varchar40,
  Bedrooms INT8, 
  Bathrooms  INT8,
  Beds  INT8,
  Minimum_Nights  INT8,
  Maximum_Nights  INT8,
  Accommodates  INT8,
  Guests_Included  INT8,
  Price  INT8 );
"""



# 3a- Execute and commit after each changes
curs.executescript(create1) 
conn.commit()  

# 3b- Now the table is PREPARED in the DAtaBase

# 4- get the dataframe and update the column names
#     If you dont update the column name, it will follow whatever csv file gives you 
df = pd.read_csv('AbnbSF_clean.csv.csv')
df.columns = ['Neighbourhood', 'Bedrooms', 'Bathrooms', 'Beds', 'Minimum Nights', 'Maximum Nights', 'Accommodates', 'Guests_Included', 'Price' ]



# 5- Insert Pandas dataframe into SQLITE DataBase 
df.to_sql('titanic', con = conn, if_exists='replace', index=False)

# Save connection to database
conn.commit() 


# 6- Now we can test on this python or using SQLITE apps.
a = conn.execute("""SELECT * FROM titanic
	LIMIT 3""").fetchall()
print("\nshow some records only: \n" )
[print(row) for row in a]


b = conn.execute("""
select count(*), Pclass from titanic
where Survived = 0
GROUP BY Pclass; 
"""  ).fetchall()

print("\ndied per class: \n")
[print(row) for row in b]


conn.cursor().execute(''' SELECT * from titanic ''')

# 7- How to create DataFrame (df2) from the table in the dbase?
    # this result is empty
dn = DataFrame(conn.cursor().fetchall(), columns=['Survived', 'Pclass', 'Age'] )
print(dn)